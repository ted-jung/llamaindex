{"ast":null,"code":"const queryIndex=async query=>{const queryURL=new URL('http://localhost:5601/query?');queryURL.searchParams.append('text',query);const response=await fetch(queryURL,{mode:'cors'});if(!response.ok){return{text:'Error in query',sources:[]};}const queryResponse=await response.json();return queryResponse;};export default queryIndex;","map":{"version":3,"names":["queryIndex","query","queryURL","URL","searchParams","append","response","fetch","mode","ok","text","sources","queryResponse","json"],"sources":["/Users/tedj/Ted-pjt/python_pjt/llama/web-app/ted-ai-app/src/apis/queryIndex.tsx"],"sourcesContent":["export type ResponseSources = {\n  text: string;\n  doc_id: string;\n  start: number;\n  end: number;\n  similarity: number;\n};\n\nexport type QueryResponse = {\n  text: string;\n  sources: ResponseSources[];\n};\n\nconst queryIndex = async (query: string): Promise<QueryResponse> => {\n  const queryURL = new URL('http://localhost:5601/query?');\n  queryURL.searchParams.append('text', query);\n\n  const response = await fetch(queryURL, { mode: 'cors' });\n  if (!response.ok) {\n    return { text: 'Error in query', sources: [] };\n  }\n\n  const queryResponse = (await response.json()) as QueryResponse;\n\n  return queryResponse;\n};\n\nexport default queryIndex;\n"],"mappings":"AAaA,KAAM,CAAAA,UAAU,CAAG,KAAO,CAAAC,KAAa,EAA6B,CAClE,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,GAAG,CAAC,8BAA8B,CAAC,CACxDD,QAAQ,CAACE,YAAY,CAACC,MAAM,CAAC,MAAM,CAAEJ,KAAK,CAAC,CAE3C,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACL,QAAQ,CAAE,CAAEM,IAAI,CAAE,MAAO,CAAC,CAAC,CACxD,GAAI,CAACF,QAAQ,CAACG,EAAE,CAAE,CAChB,MAAO,CAAEC,IAAI,CAAE,gBAAgB,CAAEC,OAAO,CAAE,EAAG,CAAC,CAChD,CAEA,KAAM,CAAAC,aAAa,CAAI,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAmB,CAE9D,MAAO,CAAAD,aAAa,CACtB,CAAC,CAED,cAAe,CAAAZ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}